<snippet>
	<content><![CDATA[

struct SEGSUM {
	/* 0-based indexing. Modify `lazy`, `pull`, `query` methods to support custom function*/
	struct node { int sm, lz, as, ok; }; int SZ; vector<node> e;

	SEGSUM(int _N) { SZ = 1 << (int) ceil(log2(_N)); e.resize(2 * SZ); }

	void lazy(int k, int h, int v) { 
		auto &[sm, lz, as, ok] = e[k]; sm += h*v, lz += v; 
	}
	void push(int k, int l, int r) {
		if (e[k].ok) {e[k<<1] = e[k<<1|1] = {e[k].as / 2, 0, e[k].as / 2, 1}; e[k].ok = 0;}
		if (e[k].lz) {int h = (r-l+1) >> 1; lazy(k<<1, h, e[k].lz); lazy(k<<1|1, h, e[k].lz); e[k].lz = 0;}
	}
	void pull(int k) { e[k].sm = e[k<<1].sm + e[k<<1|1].sm; }

	void assign(int a, int b, int v, int k, int l, int r) {
		if (l > b || r < a) return;
	    if (l >= a && r <= b) {int h = (r-l+1); e[k] = {h*v, 0, h*v, 1}; return;}
	    push(k, l, r); int m = (l + r) >> 1;
	    assign(a, b, v, k<<1, l, m); assign(a, b, v, k<<1|1, m+1, r); pull(k);
	}
	void assign(int a, int b, int v) { assign(a, b, v, 1, 0, SZ - 1); }

	void add(int a, int b, int v, int k, int l, int r) {
		if (l > b || r < a) return; 
		if (l >= a && r <= b) {lazy(k, r-l+1, v); return;}
	    push(k, l, r); int m = (l + r) >> 1; 
	    add(a, b, v, k<<1, l, m); add(a, b, v, k<<1|1, m + 1, r); pull(k);
	}
	void add(int a, int b, int v) { add(a, b, v, 1, 0, SZ - 1); }

	int query(int a, int b, int k, int l, int r) {
		if (l > b || r < a) return 0; 
		if (l >= a && r <= b) return e[k].sm;
	    push(k, l, r); int m = (l + r) >> 1;
	    return query(a, b, k<<1, l, m) + query(a, b, k<<1|1, m + 1, r);
	}
	int query(int a, int b) { return query(a, b, 1, 0, SZ - 1); }
};


]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>segsum</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
